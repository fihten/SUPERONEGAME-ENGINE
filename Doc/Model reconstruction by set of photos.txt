TODO:
1. fix build - done
2. restore last successful test - done
3. try check not a linearness but linearness AND equalness of linear coefficient to transformation jacobian
4. try to calculate linear coefficient based on photo samples relative to its average values
5. try to optimize calculation time
6. write test for searching the same points on two diffrent photos
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Coordinates of i-th camera:
Rc[i]
Ac[i]
Bc[i]

xc = Rc[i]*sin(Bc[i])*cos(Ac[i]);
yc = Rc[i]*sin(Bc[i])*sin(Ac[i]);
zc = Rc[i]*cos(Bc[i]);

Coordinates of i-th camera direction:
Ad[i]
Bd[i]
Cd[i]

I = {1, 0, 0}
J = {0, 1, 0}
K = {0, 0, 1}

I' = I = {1, 0, 0}
J' = {0, cos(Ad[i]), sin(Ad[i])}
K' = {0, -sin(Ad[i]), cos(Ad[i])}

    | cos(Bd[i]) sin(Bd[i])   0|
M = |-sin(Bd[i]) cos(Bd[i])   0|
    |          0          0   1|

I" = { cos(Bd[i]), sin(Bd[i]), 0}
J" = { -cos(Ad[i])*sin(Bd[i]), cos(Ad[i])*cos(Bd[i]), sin(Ad[i])}
K" = { sin(Ad[i])*sin(Bd[i]), -sin(Ad[i])*cos(Bd[i]), cos(Ad[i])}

I''' = cos(Cd[i])*I"+sin(Cd[i])*J" = 

{cos(Bd[i])*cos(Cd[i]), sin(Bd[i])*cos(Cd[i]), 0} +
{-cos(Ad[i])*sin(Bd[i])*sin(Cd[i]), cos(Ad[i])*cos(Bd[i])*sin(Cd[i]), sin(Ad[i])*sin(Cd[i])} = 

{cos(Bd[i])*cos(Cd[i])-cos(Ad[i])*sin(Bd[i])*sin(Cd[i]), sin(Bd[i])*cos(Cd[i])+cos(Ad[i])*cos(Bd[i])*sin(Cd[i]), sin(Ad[i])*sin(Cd[i])}

J''' = -sin(Cd[i])*I"+cos(Cd[i])*J" = 

-sin(Cd[i])*{ cos(Bd[i]), sin(Bd[i]), 0} +
cos(Cd[i])*{ -cos(Ad[i])*sin(Bd[i]), cos(Ad[i])*cos(Bd[i]), sin(Ad[i])} = 

{-cos(Bd[i])*sin(Cd[i]), -sin(Bd[i])*sin(Cd[i]), 0} +
{-cos(Ad[i])*sin(Bd[i])*cos(Cd[i]), cos(Ad[i])*cos(Bd[i])*cos(Cd[i]), sin(Ad[i])*cos(Cd[i])} = 

{-cos(Bd[i])*sin(Cd[i])-cos(Ad[i])*sin(Bd[i])*cos(Cd[i]), -sin(Bd[i])*sin(Cd[i])+cos(Ad[i])*cos(Bd[i])*cos(Cd[i]), sin(Ad[i])*cos(Cd[i])}

K''' = K" = { sin(Ad[i])*sin(Bd[i]), -sin(Ad[i])*cos(Bd[i]), cos(Ad[i])}

| cos(Bd[i])*cos(Cd[i])-cos(Ad[i])*sin(Bd[i])*sin(Cd[i])	sin(Bd[i])*cos(Cd[i])+cos(Ad[i])*cos(Bd[i])*sin(Cd[i])		sin(Ad[i])*sin(Cd[i]) |
| -cos(Bd[i])*sin(Cd[i])-cos(Ad[i])*sin(Bd[i])*cos(Cd[i])	-sin(Bd[i])*sin(Cd[i])+cos(Ad[i])*cos(Bd[i])*cos(Cd[i])		sin(Ad[i])*cos(Cd[i]) |
| sin(Ad[i])*sin(Bd[i])						-sin(Ad[i])*cos(Bd[i])						cos(Ad[i])	      |

view[0][0] = cos(Bd[i])*cos(Cd[i])-cos(Ad[i])*sin(Bd[i])*sin(Cd[i]); view[0][1] = -cos(Bd[i])*sin(Cd[i])-cos(Ad[i])*sin(Bd[i])*cos(Cd[i]); view[0][2] = sin(Ad[i])*sin(Bd[i]); view[0][3] = 0;
view[1][0] = sin(Bd[i])*cos(Cd[i])+cos(Ad[i])*cos(Bd[i])*sin(Cd[i]); view[1][1] = -sin(Bd[i])*sin(Cd[i])+cos(Ad[i])*cos(Bd[i])*cos(Cd[i]); view[1][2] = -sin(Ad[i])*cos(Bd[i]); view[1][3] = 0;
view[2][0] = sin(Ad[i])*sin(Cd[i]); view[2][1] = sin(Ad[i])*cos(Cd[i]); view[2][2] = cos(Ad[i]); view[2][3] = 0;

view[3][0] = -xc*I'''.x-yc*I'''.y-zc*I'''.z = 

-Rc[i]*sin(Bc[i])*cos(Ac[i])*(cos(Bd[i])*cos(Cd[i])-cos(Ad[i])*sin(Bd[i])*sin(Cd[i])) -
Rc[i]*sin(Bc[i])*sin(Ac[i])*(sin(Bd[i])*cos(Cd[i])+cos(Ad[i])*cos(Bd[i])*sin(Cd[i])) - 
Rc[i]*cos(Bc[i])*sin(Ad[i])*sin(Cd[i]) = 

-Rc[i]*sin(Bc[i])*cos(Ac[i])*cos(Bd[i])*cos(Cd[i])+Rc[i]*sin(Bc[i])*cos(Ac[i])*cos(Ad[i])*sin(Bd[i])*sin(Cd[i])-
Rc[i]*sin(Bc[i])*sin(Ac[i])*sin(Bd[i])*cos(Cd[i])-Rc[i]*sin(Bc[i])*sin(Ac[i])*cos(Ad[i])*cos(Bd[i])*sin(Cd[i])-
Rc[i]*cos(Bc[i])*sin(Ad[i])*sin(Cd[i])

view[3][1] = -xc*J'''.x-yc*J'''.y-zc*J'''.z =

-Rc[i]*sin(Bc[i])*cos(Ac[i])*(-cos(Bd[i])*sin(Cd[i])-cos(Ad[i])*sin(Bd[i])*cos(Cd[i]))-
Rc[i]*sin(Bc[i])*sin(Ac[i])*(-sin(Bd[i])*sin(Cd[i])+cos(Ad[i])*cos(Bd[i])*cos(Cd[i]))-
Rc[i]*cos(Bc[i])*sin(Ad[i])*cos(Cd[i]) = 

Rc[i]*sin(Bc[i])*cos(Ac[i])*cos(Bd[i])*sin(Cd[i])+Rc[i]*sin(Bc[i])*cos(Ac[i])*cos(Ad[i])*sin(Bd[i])*cos(Cd[i])+
Rc[i]*sin(Bc[i])*sin(Ac[i])*sin(Bd[i])*sin(Cd[i])-Rc[i]*sin(Bc[i])*sin(Ac[i])*cos(Ad[i])*cos(Bd[i])*cos(Cd[i])-
Rc[i]*cos(Bc[i])*sin(Ad[i])*cos(Cd[i])

view[3][2] = -xc*K'''.x-yc*K'''.y-zc*K'''.z =

-Rc[i]*sin(Bc[i])*cos(Ac[i])*sin(Ad[i])*sin(Bd[i])+Rc[i]*sin(Bc[i])*sin(Ac[i])*sin(Ad[i])*cos(Bd[i])-Rc[i]*cos(Bc[i])*cos(Ad[i])

view[3][3] = 1

Coordinates of j-th point:
R[j]
A[i]
B[i]

x = R[i]*sin(B[i])*cos(A[i]);
y = R[i]*sin(B[i])*sin(A[i]);
z = R[i]*cos(B[i]);

